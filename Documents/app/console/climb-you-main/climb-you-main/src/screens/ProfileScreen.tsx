import React, { useState, useEffect } from 'react';
import { View, Text, TouchableOpacity, Alert, StyleSheet, ScrollView, SafeAreaView } from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { firebaseConfig } from '../services/firebase/config';
import { hybridStorageService } from '../services/storage/hybridStorage';
import { advancedQuestService, ProfileV1 } from '../services/ai/advancedQuestService';
import { aiInitializationService, AIInitializationResult } from '../services/ai/aiInitializationService';
import { apiKeyManager } from '../config/apiKeys';
import { profileService } from '../services/firebase/profileService';
import { ProfileV1Schema, GoalDeepDiveAnswersSchema, GoalDeepDiveAnswers } from '../types/questGeneration';
import { GoalDeepDive } from '../components/GoalDeepDive';
import { ProfileForm } from '../components/ProfileForm';

export default function ProfileScreen() {
  const [userId, setUserId] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [connectionStatus, setConnectionStatus] = useState<string>('Êú™Êé•Á∂ö');
  const [syncStatus, setSyncStatus] = useState<string>('‰∏çÊòé');
  const [testResults, setTestResults] = useState<string[]>([]);
  const [aiStatus, setAiStatus] = useState<string>('Êú™Á¢∫Ë™ç');
  const [initializationResult, setInitializationResult] = useState<AIInitializationResult | null>(null);
  
  // Phase 2: Profiling UI state
  const [showGoalDeepDive, setShowGoalDeepDive] = useState(false);
  const [showProfileForm, setShowProfileForm] = useState(false);
  const [currentGoalDeepDive, setCurrentGoalDeepDive] = useState<GoalDeepDiveAnswers | null>(null);
  const [currentProfile, setCurrentProfile] = useState<ProfileV1 | null>(null);

  useEffect(() => {
    checkServices();
    checkAIStatus();
  }, []);

  const checkServices = async () => {
    const currentUser = firebaseConfig.getCurrentUser();
    if (currentUser) {
      setUserId(currentUser.uid);
      setConnectionStatus('ÂåøÂêçË™çË®ºÊ∏à„Åø');
      await checkSyncStatus();
    } else {
      setConnectionStatus('Êú™Ë™çË®º');
    }
  };

  const checkSyncStatus = async () => {
    try {
      const status = await hybridStorageService.getSyncStatus();
      const statusText = status.hasUnsyncedChanges 
        ? 'Êú™ÂêåÊúü„ÅÆÂ§âÊõ¥„ÅÇ„Çä' 
        : status.lastSyncAt 
          ? `ÊúÄÁµÇÂêåÊúü: ${status.lastSyncAt.toLocaleTimeString()}`
          : 'ÂêåÊúü„Å™„Åó';
      setSyncStatus(statusText);
    } catch (error) {
      setSyncStatus('„Çπ„ÉÜ„Éº„Çø„ÇπÂèñÂæó„Ç®„É©„Éº');
    }
  };


  const checkAIStatus = async () => {
    try {
      const diagnosis = apiKeyManager.diagnoseConfiguration();
      const statusParts = [];
      
      if (diagnosis.openaiKeyConfigured) statusParts.push('API„Ç≠„Éº‚úÖ');
      else statusParts.push('API„Ç≠„Éº‚ùå');
      
      if (diagnosis.openaiKeyValid) statusParts.push('Ê§úË®º‚úÖ');
      else statusParts.push('Ê§úË®º‚ùå');
      
      if (diagnosis.aiFeatureEnabled) statusParts.push('AIÊ©üËÉΩ‚úÖ');
      else statusParts.push('AIÊ©üËÉΩ‚ùå');
      
      setAiStatus(statusParts.join(' '));
    } catch (error) {
      setAiStatus('„Ç®„É©„Éº');
    }
  };

  const runFullFirebaseTest = async () => {
    setIsLoading(true);
    const results: string[] = [];
    
    try {
      results.push('üî• FirebaseÂàùÊúüÂåñÁ¢∫Ë™ç...');
      
      // AnonymousË™çË®º„ÉÜ„Çπ„Éà
      try {
        const user = await firebaseConfig.signInAnonymously();
        setUserId(user.uid);
        setConnectionStatus('ÂåøÂêçË™çË®ºÊ∏à„Åø');
        results.push(`‚úÖ ÂåøÂêçË™çË®ºÊàêÂäü: ${user.uid.substring(0, 8)}...`);
        
        // Hybrid Storage„ÉÜ„Çπ„Éà - Goal‰ΩúÊàê
        const goalId = await hybridStorageService.createGoal({
          title: '„ÉÜ„Çπ„ÉàÁõÆÊ®ô',
          description: 'FirebaseÊ©üËÉΩ„ÉÜ„Çπ„ÉàÁî®„ÅÆÁõÆÊ®ô',
          category: '„ÉÜ„Çπ„Éà',
          timeframe: '1ÈÄ±Èñì',
          intensity: 'medium',
        });
        results.push(`‚úÖ Goal‰ΩúÊàêÊàêÂäü: ${goalId}`);
        
        // Hybrid Storage„ÉÜ„Çπ„Éà - Quest‰ΩúÊàê
        const questId = await hybridStorageService.createQuest({
          title: '„ÉÜ„Çπ„Éà„ÇØ„Ç®„Çπ„Éà',
          description: 'FirebaseÂãï‰ΩúÁ¢∫Ë™çÁî®„ÇØ„Ç®„Çπ„Éà',
          category: '„ÉÜ„Çπ„Éà',
          difficulty: 'easy',
          estimatedTime: 10,
          generatedBy: 'manual',
        });
        results.push(`‚úÖ Quest‰ΩúÊàêÊàêÂäü: ${questId}`);
        
        // „Éá„Éº„ÇøË™≠„ÅøÂèñ„Çä„ÉÜ„Çπ„Éà
        const [goals, quests] = await Promise.all([
          hybridStorageService.getGoals(),
          hybridStorageService.getQuests(),
        ]);
        results.push(`‚úÖ „Éá„Éº„ÇøË™≠„ÅøÂèñ„ÇäÊàêÂäü: Goals ${goals.length}‰ª∂, Quests ${quests.length}‰ª∂`);
        
        // FirestoreÂêåÊúü„ÉÜ„Çπ„Éà
        const syncSuccess = await hybridStorageService.forceSync();
        results.push(`${syncSuccess ? '‚úÖ' : '‚ùå'} FirestoreÂêåÊúü: ${syncSuccess ? 'ÊàêÂäü' : 'Â§±Êïó'}`);
        
        await checkSyncStatus();
        
      } catch (error) {
        results.push(`‚ùå Ë™çË®º„Ç®„É©„Éº: ${error.message}`);
      }
      
    } catch (error) {
      results.push(`‚ùå FirebaseÂàùÊúüÂåñ„Ç®„É©„Éº: ${error.message}`);
    }
    
    setTestResults(results);
    setIsLoading(false);
  };

  const testAdvancedQuests = async () => {
    Alert.alert(
      'üéØ Advanced Quest Generation',
      'Ë®≠Ë®àÊõ∏„ÅÆÈ´òÂìÅË≥™„Éó„É≠„É≥„Éó„Éà„Çí‰Ωø„Å£„ÅüÊ¨°‰∏ñ‰ª£„ÇØ„Ç®„Çπ„ÉàÁîüÊàê„Çí„ÉÜ„Çπ„Éà„Åó„Åæ„Åô„ÄÇ',
      [
        {
          text: 'API„Ç≠„ÉºË®≠ÂÆö',
          onPress: () => {
            Alert.alert(
              'OpenAI APIË®≠ÂÆö',
              'Ë®≠ÂÆö„Åô„ÇãAPI„Ç≠„Éº„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ',
              [
                {
                  text: '„Éá„É¢Áî®„ÉÜ„Çπ„Éà',
                  onPress: () => testAdvancedQuestsDemo()
                },
                {
                  text: '„Ç≠„É£„É≥„Çª„É´',
                  style: 'cancel'
                }
              ]
            );
          }
        },
        {
          text: '„Éá„É¢ÂÆüË°åÔºàAPI‰∏çË¶ÅÔºâ',
          onPress: () => testAdvancedQuestsDemo()
        },
        {
          text: '„Ç≠„É£„É≥„Çª„É´',
          style: 'cancel'
        }
      ]
    );
  };

  const testMockSkillMap = async () => {
    setIsLoading(true);
    const results: string[] = [];
    
    try {
      results.push('üß™ „É¢„ÉÉ„ÇØ„Çπ„Ç≠„É´„Éû„ÉÉ„ÉóÂÄãÂà•„ÉÜ„Çπ„ÉàÈñãÂßã');
      
      // Advanced Quest ServiceÂàùÊúüÂåñÁ¢∫Ë™ç
      const initialized = advancedQuestService.isInitialized();
      results.push(`‚úÖ „Çµ„Éº„Éì„ÇπÂàùÊúüÂåñ: ${initialized ? 'OK' : 'NG'}`);
      
      if (!initialized) {
        const success = advancedQuestService.initialize();
        results.push(`üîÑ ÂàùÊúüÂåñÂÆüË°å: ${success ? 'ÊàêÂäü' : 'Â§±Êïó'}`);
      }
      
      // „Çπ„Ç≠„É´„Éû„ÉÉ„ÉóÁîüÊàê„ÉÜ„Çπ„Éà
      results.push('üéØ „Çπ„Ç≠„É´„Éû„ÉÉ„ÉóÁîüÊàê„ÉÜ„Çπ„Éà...');
      const skillAtoms = await advancedQuestService.generateSkillMap({
        goalText: 'React Native„ÉÜ„Çπ„ÉàÁõÆÊ®ô',
        currentLevelTags: ['ÂàùÂøÉËÄÖ'],
        priorityAreas: ['Âü∫Á§é']
      });
      
      results.push(`‚úÖ „Çπ„Ç≠„É´„Éû„ÉÉ„ÉóÁîüÊàêÊàêÂäü: ${skillAtoms.length}È†ÖÁõÆ`);
      skillAtoms.slice(0, 3).forEach((atom, i) => {
        results.push(`  ${i+1}. ${atom.label} (${atom.type})`);
      });
      
      setTestResults(results);
      Alert.alert('„Çπ„Ç≠„É´„Éû„ÉÉ„Éó„ÉÜ„Çπ„Éà', 'ÊàêÂäüÔºÅË©≥Á¥∞„ÅØ„É≠„Ç∞„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ');
      
    } catch (error) {
      results.push(`‚ùå „Ç®„É©„Éº: ${error.message}`);
      if (error.name === 'ZodError') {
        results.push(`üêõ Zod„Ç®„É©„ÉºË©≥Á¥∞: ${JSON.stringify(error.errors, null, 2)}`);
      }
      setTestResults(results);
      Alert.alert('„Ç®„É©„Éº', `„Çπ„Ç≠„É´„Éû„ÉÉ„Éó„ÉÜ„Çπ„ÉàÂ§±Êïó: ${error.message}`);
    }
    
    setIsLoading(false);
  };

  const testMockQuests = async () => {
    setIsLoading(true);
    const results: string[] = [];
    
    try {
      results.push('üé≤ „É¢„ÉÉ„ÇØ„ÇØ„Ç®„Çπ„ÉàÂÄãÂà•„ÉÜ„Çπ„ÉàÈñãÂßã');
      
      // „Çµ„É≥„Éó„É´„Éó„É≠„Éï„Ç°„Ç§„É´‰ΩúÊàê
      const profile = advancedQuestService.createBasicProfile({
        goalText: '„ÉÜ„Çπ„ÉàÁõÆÊ®ô',
        timeBudgetMin: 30,
        motivation: 'high'
      });
      
      // „Çµ„É≥„Éó„É´„Çπ„Ç≠„É´„Ç¢„Éà„É†
      const sampleSkillAtoms = [
        {
          id: 'test-skill',
          label: '„ÉÜ„Çπ„Éà„Çπ„Ç≠„É´',
          type: 'concept' as const,
          level: 'intro' as const,
          bloom: 'understand' as const,
          prereq: [],
          representative_tasks: ['„ÉÜ„Çπ„Éà„Çø„Çπ„ÇØ'],
          suggested_patterns: ['read_note_q' as const]
        }
      ];
      
      // „ÇØ„Ç®„Çπ„ÉàÁîüÊàê„ÉÜ„Çπ„Éà
      results.push('üéØ „ÇØ„Ç®„Çπ„ÉàÁîüÊàê„ÉÜ„Çπ„Éà...');
      const quests = await advancedQuestService.generateDailyQuests({
        profile,
        skillAtoms: sampleSkillAtoms
      });
      
      results.push(`‚úÖ „ÇØ„Ç®„Çπ„ÉàÁîüÊàêÊàêÂäü: ${quests.length}ÂÄã`);
      quests.slice(0, 2).forEach((quest, i) => {
        results.push(`  ${i+1}. ${quest.title} (${quest.minutes}ÂàÜ)`);
      });
      
      setTestResults(results);
      Alert.alert('„ÇØ„Ç®„Çπ„Éà„ÉÜ„Çπ„Éà', 'ÊàêÂäüÔºÅË©≥Á¥∞„ÅØ„É≠„Ç∞„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ');
      
    } catch (error) {
      results.push(`‚ùå „Ç®„É©„Éº: ${error.message}`);
      if (error.name === 'ZodError') {
        results.push(`üêõ Zod„Ç®„É©„ÉºË©≥Á¥∞: ${JSON.stringify(error.errors, null, 2)}`);
      }
      setTestResults(results);
      Alert.alert('„Ç®„É©„Éº', `„ÇØ„Ç®„Çπ„Éà„ÉÜ„Çπ„ÉàÂ§±Êïó: ${error.message}`);
    }
    
    setIsLoading(false);
  };

  const testAdvancedQuestsDemo = async () => {
    setIsLoading(true);
    const results: string[] = [];
    
    try {
      results.push('üéØ Advanced Quest Service „ÉÜ„Çπ„ÉàÈñãÂßã');
      
      // „Éá„É¢„Éó„É≠„Éï„Ç°„Ç§„É´‰ΩúÊàê
      const demoProfile = advancedQuestService.createBasicProfile({
        goalText: 'React Native„Åß„É¢„Éê„Ç§„É´„Ç¢„Éó„É™ÈñãÁô∫„Çí„Éû„Çπ„Çø„Éº„Åô„Çã',
        timeBudgetMin: 60,
        motivation: 'high',
        sessionLength: 25
      });
      
      results.push(`‚úÖ „Éó„É≠„Éï„Ç°„Ç§„É´‰ΩúÊàêÊàêÂäü`);
      results.push(`üìä ÊôÇÈñì‰∫àÁÆó: ${demoProfile.time_budget_min_per_day}ÂàÜ/Êó•`);
      results.push(`üî• „É¢„ÉÅ„Éô„Éº„Ç∑„Éß„É≥: ${demoProfile.goal_motivation}`);
      results.push(`‚è±Ô∏è „Çª„ÉÉ„Ç∑„Éß„É≥Èï∑: ${demoProfile.preferred_session_length_min}ÂàÜ`);
      
      // ÂÆüÈöõ„ÅÆAPI„Ç≠„ÉºÁ¢∫Ë™ç„Å®Êú¨Ê†º„ÉÜ„Çπ„ÉàÂÆüË°å
      const initialized = advancedQuestService.isInitialized();
      if (initialized) {
        results.push('');
        results.push('üöÄ ÂÆüÈöõ„ÅÆ„ÇØ„Ç®„Çπ„ÉàÁîüÊàê„ÉÜ„Çπ„ÉàÂÆüË°å‰∏≠...');
        
        try {
          // ÂÆüÈöõ„ÅÆOpenAI APIÂëº„Å≥Âá∫„Åó„ÉÜ„Çπ„Éà
          const questResult = await advancedQuestService.generateOptimizedQuests({
            goalText: demoProfile.long_term_goal,
            profile: demoProfile,
            currentLevelTags: ['React NativeÂàùÂøÉËÄÖ', 'JavaScriptÂü∫Á§é'],
            priorityAreas: ['„Ç≥„É≥„Éù„Éº„Éç„É≥„ÉàË®≠Ë®à', 'Áä∂ÊÖãÁÆ°ÁêÜ'],
            checkins: {
              mood_energy: 'high',
              available_time_today_delta_min: 0,
              focus_noise: 'low'
            }
          });
          
          results.push(`‚úÖ „Çπ„Ç≠„É´„Éû„ÉÉ„ÉóÁîüÊàê: ${questResult.skillAtoms.length}È†ÖÁõÆ`);
          results.push(`‚úÖ ÂÄôË£ú„ÇØ„Ç®„Çπ„Éà: ${questResult.questsCandidate.length}ÂÄã`);
          results.push(`‚úÖ ÊúÄÈÅ©Âåñ„ÇØ„Ç®„Çπ„Éà: ${questResult.finalQuests.quests.length}ÂÄã`);
          
          // Firebase„Å´‰øùÂ≠ò„ÉÜ„Çπ„Éà
          results.push('');
          results.push('üíæ Firebase‰øùÂ≠ò„ÉÜ„Çπ„Éà...');
          
          // Goal‰ΩúÊàê
          const goalId = await hybridStorageService.createGoal({
            title: demoProfile.long_term_goal,
            description: 'AIÁîüÊàê„Å´„Çà„ÇãÂ≠¶ÁøíÁõÆÊ®ô',
            category: '„Éó„É≠„Ç∞„É©„Éü„É≥„Ç∞',
            timeframe: '3„É∂Êúà',
            intensity: 'high'
          });
          results.push(`‚úÖ Goal‰øùÂ≠ò: ${goalId}`);
          
          // Quest‰øùÂ≠ò
          for (let i = 0; i < Math.min(3, questResult.finalQuests.quests.length); i++) {
            const quest = questResult.finalQuests.quests[i];
            const questId = await hybridStorageService.createQuest({
              goalId,
              title: quest.title,
              description: quest.description || `${quest.learning_pattern}„Å´„Çà„ÇãÂ≠¶Áøí„ÇØ„Ç®„Çπ„Éà`,
              estimatedMinutes: quest.minutes,
              difficulty: 'medium',
              pattern: quest.learning_pattern
            });
            results.push(`‚úÖ Quest‰øùÂ≠ò ${i+1}: ${questId.substring(0, 8)}...`);
          }
          
          results.push('');
          results.push('üéâ ÂÆåÂÖ®„ÉÜ„Çπ„ÉàÊàêÂäüÔºÅOpenAI‚ÜíFirebaseÈÄ£Êê∫OK');
          
        } catch (apiError) {
          results.push(`‚ùå APIÂëº„Å≥Âá∫„Åó„Ç®„É©„Éº: ${apiError.message}`);
          results.push('');
          results.push('üìã Ë®≠Ë®àÊõ∏„ÅÆÊ©üËÉΩÔºàAPIÂæÖÊ©ü‰∏≠Ôºâ:');
          results.push('‚Ä¢ „Çπ„Ç≠„É´„Éû„ÉÉ„ÉóËá™ÂãïÁîüÊàê (12-18È†ÖÁõÆ)');
          results.push('‚Ä¢ „Éë„Çø„Éº„É≥„Éô„Éº„ÇπÂ≠¶Áøí (10Á®ÆÈ°û)');
          results.push('‚Ä¢ Âà∂Á¥ÑËÄÉÊÖÆ„ÇØ„Ç®„Çπ„ÉàÁîüÊàê (ÊôÇÈñì„ÉªÁí∞Â¢É)');
          results.push('‚Ä¢ „Éù„É™„Ç∑„Éº„ÉÅ„Çß„ÉÉ„ÇØ & ÂìÅË≥™‰øùË®º');
        }
      } else {
        results.push('');
        results.push('‚ö†Ô∏è  API„Ç≠„ÉºÊú™Ë®≠ÂÆö - „Éá„É¢„É¢„Éº„Éâ„ÅÆ„Åø');
        results.push('üìã Ë®≠Ë®àÊõ∏„ÅÆÊ©üËÉΩ:');
        results.push('‚Ä¢ „Çπ„Ç≠„É´„Éû„ÉÉ„ÉóËá™ÂãïÁîüÊàê (12-18È†ÖÁõÆ)');
        results.push('‚Ä¢ „Éë„Çø„Éº„É≥„Éô„Éº„ÇπÂ≠¶Áøí (10Á®ÆÈ°û)');
        results.push('‚Ä¢ Âà∂Á¥ÑËÄÉÊÖÆ„ÇØ„Ç®„Çπ„ÉàÁîüÊàê (ÊôÇÈñì„ÉªÁí∞Â¢É)');
        results.push('‚Ä¢ „Éù„É™„Ç∑„Éº„ÉÅ„Çß„ÉÉ„ÇØ & ÂìÅË≥™‰øùË®º');
      }

      setTestResults(results);
      
      if (initialized) {
        Alert.alert('Advanced Quest Service', 'Êú¨Ê†º„ÉÜ„Çπ„ÉàÂÆå‰∫ÜÔºÅOpenAI API‚ÜíFirebaseÈÄ£Êê∫„Çí„ÉÜ„Çπ„Éà„Åó„Åæ„Åó„Åü„ÄÇ');
      } else {
        Alert.alert('Advanced Quest Service', '„Éá„É¢ÂÆå‰∫ÜÔºÅAPI„Ç≠„ÉºË®≠ÂÆöÂæå„Å´ÂÆüÈöõ„ÅÆÁîüÊàê„ÅåÂèØËÉΩ„Åß„Åô„ÄÇ');
      }
      
    } catch (error) {
      results.push(`‚ùå „Ç®„É©„Éº: ${error.message}`);
      setTestResults(results);
    }
    
    setIsLoading(false);
  };


  const restartOnboarding = async () => {
    Alert.alert(
      '„Ç™„É≥„Éú„Éº„Éá„Ç£„É≥„Ç∞ÂÜçËµ∑Âãï',
      'ÁõÆÊ®ôË®≠ÂÆö„Åã„ÇâÂÜçÈñã„Åó„Åæ„Åô„ÅãÔºüÁèæÂú®„ÅÆ„Éá„Éº„Çø„ÅØ‰øùÊåÅ„Åï„Çå„Åæ„Åô„ÄÇ',
      [
        {
          text: '„Ç≠„É£„É≥„Çª„É´',
          style: 'cancel'
        },
        {
          text: 'ÂÜçËµ∑Âãï',
          onPress: async () => {
            try {
              // „Ç™„É≥„Éú„Éº„Éá„Ç£„É≥„Ç∞ÂÆå‰∫Ü„Éï„É©„Ç∞„Çí„É™„Çª„ÉÉ„Éà
              await AsyncStorage.setItem('onboarding_completed', 'false');
              Alert.alert(
                '„Ç™„É≥„Éú„Éº„Éá„Ç£„É≥„Ç∞ÂÜçËµ∑Âãï',
                '„Ç¢„Éó„É™„ÇíÂÜçËµ∑Âãï„Åó„Å¶„Ç™„É≥„Éú„Éº„Éá„Ç£„É≥„Ç∞„ÇíÈñãÂßã„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ',
                [
                  {
                    text: 'OK',
                    onPress: () => {
                      // „Ç¢„Éó„É™„ÅÆÂÜçË™≠„ÅøËæº„Åø„Çí‰øÉ„Åô
                      setTestResults(['üîÑ „Ç™„É≥„Éú„Éº„Éá„Ç£„É≥„Ç∞„Åå„É™„Çª„ÉÉ„Éà„Åï„Çå„Åæ„Åó„Åü', '„Ç¢„Éó„É™„ÇíÂÜçËµ∑Âãï„Åó„Å¶„Åè„Å†„Åï„ÅÑ']);
                    }
                  }
                ]
              );
            } catch (error) {
              Alert.alert('„Ç®„É©„Éº', '„Ç™„É≥„Éú„Éº„Éá„Ç£„É≥„Ç∞„ÅÆ„É™„Çª„ÉÉ„Éà„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
            }
          }
        }
      ]
    );
  };


  const testAIInitialization = async () => {
    setIsLoading(true);
    const results: string[] = [];
    
    try {
      results.push('üöÄ AIÂàùÊúüÂåñ„Çµ„Éº„Éì„Çπ„ÉÜ„Çπ„ÉàÈñãÂßã');
      
      // ÂàùÊúüÂåñÂâç„ÅÆÁä∂ÊÖãË®∫Êñ≠
      await aiInitializationService.logDiagnosticInfo();
      
      // Ë®≠ÂÆö„Ç¨„Ç§„ÉÄ„É≥„ÇπÂèñÂæó
      const guidance = aiInitializationService.getSetupGuidance();
      results.push(`üîë API„Ç≠„ÉºÊúâÂäπ: ${guidance.hasValidAPIKey ? '‚úÖ' : '‚ùå'}`);
      
      if (!guidance.hasValidAPIKey) {
        results.push('‚ö†Ô∏è  Ë®≠ÂÆöÊâãÈ†Ü:');
        guidance.instructions.slice(0, 5).forEach(instruction => {
          results.push(`   ${instruction}`);
        });
      }
      
      // ÂÖ®AI„Çµ„Éº„Éì„ÇπÂàùÊúüÂåñ„ÉÜ„Çπ„Éà
      const initResult = await aiInitializationService.initializeAllServices();
      setInitializationResult(initResult);
      
      results.push(`üéØ ÂàùÊúüÂåñÁµêÊûú: ${initResult.success ? 'ÊàêÂäü' : 'Â§±Êïó'}`);
      results.push(`‚úÖ ÂàùÊúüÂåñÊ∏à„Åø„Çµ„Éº„Éì„Çπ: ${initResult.initialized.length}`);
      results.push(`‚ùå Â§±Êïó„Çµ„Éº„Éì„Çπ: ${initResult.failed.length}`);
      
      initResult.services.forEach(service => {
        const status = service.isInitialized ? '‚úÖ' : '‚ùå';
        const error = service.error ? ` (${service.error})` : '';
        results.push(`   ${status} ${service.service}${error}`);
      });
      
      // API Key ManagerË®∫Êñ≠
      const apiDiagnosis = apiKeyManager.diagnoseConfiguration();
      results.push(`üîß APIË®≠ÂÆöË®∫Êñ≠:`);
      results.push(`   Ë®≠ÂÆöÊ∏à„Åø: ${apiDiagnosis.openaiKeyConfigured ? '‚úÖ' : '‚ùå'}`);
      results.push(`   ÊúâÂäπ: ${apiDiagnosis.openaiKeyValid ? '‚úÖ' : '‚ùå'}`);
      results.push(`   AIÊ©üËÉΩ: ${apiDiagnosis.aiFeatureEnabled ? '‚úÖ' : '‚ùå'}`);
      
      // Advanced Quest ServiceÁä∂ÊÖãÁ¢∫Ë™ç
      const questDiagnosis = advancedQuestService.getDiagnosticInfo();
      results.push(`üéØ „ÇØ„Ç®„Çπ„Éà„Çµ„Éº„Éì„Çπ:`);
      results.push(`   ÂàùÊúüÂåñÊ∏à„Åø: ${questDiagnosis.isInitialized ? '‚úÖ' : '‚ùå'}`);
      results.push(`   APIÂà©Áî®ÂèØËÉΩ: ${questDiagnosis.apiKeyAvailable ? '‚úÖ' : '‚ùå'}`);
      
      setTestResults(results);
      await checkAIStatus();
      
    } catch (error) {
      results.push(`‚ùå „Ç®„É©„Éº: ${error.message}`);
      setTestResults(results);
    }
    
    setIsLoading(false);
  };

  const clearTestData = async () => {
    Alert.alert(
      '„ÉÜ„Çπ„Éà„Éá„Éº„ÇøÂâäÈô§',
      '„É≠„Éº„Ç´„É´„ÅÆ„ÉÜ„Çπ„Éà„Éá„Éº„Çø„ÇíÂâäÈô§„Åó„Åæ„Åô„ÅãÔºü',
      [
        {
          text: '„Ç≠„É£„É≥„Çª„É´',
          style: 'cancel'
        },
        {
          text: 'ÂâäÈô§',
          style: 'destructive',
          onPress: async () => {
            await hybridStorageService.clearLocalData();
            setTestResults([]);
            setSyncStatus('„Éá„Éº„ÇøÂâäÈô§Ê∏à„Åø');
            Alert.alert('ÂÆå‰∫Ü', '„É≠„Éº„Ç´„É´„Éá„Éº„Çø„ÇíÂâäÈô§„Åó„Åæ„Åó„Åü');
          }
        }
      ]
    );
  };

  // === Phase 1: Data Foundation Tests ===
  
  const testProfileServiceSave = async () => {
    setIsLoading(true);
    const results: string[] = [];
    
    try {
      results.push('üèóÔ∏è Phase 1.1: ProfileService‰øùÂ≠ò„ÉÜ„Çπ„ÉàÈñãÂßã');
      
      // Ensure user is authenticated
      if (!userId) {
        const user = await firebaseConfig.signInAnonymously();
        setUserId(user.uid);
        results.push(`üîê ÂåøÂêçË™çË®ºÂÆå‰∫Ü: ${user.uid.substring(0, 8)}...`);
      }
      
      // Create test profile data
      const testProfileV1 = profileService.createBasicTestProfile({
        long_term_goal: 'Phase 1„ÉÜ„Çπ„Éà: React NativeÁøíÂæó',
        time_budget_min_per_day: 45,
        goal_motivation: 'high',
        preferred_session_length_min: 20,
      });
      
      const testGoalDeepDive = profileService.createBasicTestGoalDeepDive({
        goal_focus: { choice: 'skill', note: 'Phase 1„ÉÜ„Çπ„ÉàÁî®' },
        goal_horizon: { choice: '3m' },
      });
      
      results.push('‚úÖ „ÉÜ„Çπ„Éà„Éá„Éº„Çø‰ΩúÊàêÂÆå‰∫Ü');
      results.push(`üìä ÊôÇÈñì‰∫àÁÆó: ${testProfileV1.time_budget_min_per_day}ÂàÜ/Êó•`);
      results.push(`üéØ ÁõÆÊ®ô: ${testProfileV1.long_term_goal}`);
      
      // Test Zod validation
      try {
        ProfileV1Schema.parse(testProfileV1);
        GoalDeepDiveAnswersSchema.parse(testGoalDeepDive);
        results.push('‚úÖ ZodÊ§úË®ºÊàêÂäü');
      } catch (validationError) {
        results.push(`‚ùå ZodÊ§úË®º„Ç®„É©„Éº: ${validationError.message}`);
        throw validationError;
      }
      
      // Save to Firestore via ProfileService
      const saveResult = await profileService.saveUserProfile({
        userId: userId!,
        goalText: testProfileV1.long_term_goal!,
        profileV1: testProfileV1,
        goalDeepDive: testGoalDeepDive,
      });
      
      if (saveResult.success) {
        results.push('‚úÖ Firestore‰øùÂ≠òÊàêÂäü');
      } else {
        results.push(`‚ùå Firestore‰øùÂ≠òÂ§±Êïó: ${saveResult.error.message}`);
        throw saveResult.error;
      }
      
      // Verify saved data by reading it back
      const loadResult = await profileService.getUserProfile(userId!);
      if (loadResult.success && loadResult.data) {
        results.push('‚úÖ FirestoreË™≠„ÅøËæº„ÅøÊàêÂäü');
        results.push(`üìã „Éó„É≠„Éï„Ç°„Ç§„É´„Éê„Éº„Ç∏„Éß„É≥: ${loadResult.data.meta.version}`);
        results.push(`‚úÖ „Ç™„É≥„Éú„Éº„Éá„Ç£„É≥„Ç∞ÂÆå‰∫Ü: ${loadResult.data.meta.completed_onboarding}`);
        results.push(`üéØ ‰øùÂ≠ò„Åï„Çå„ÅüÁõÆÊ®ô: ${loadResult.data.basic.goal_text}`);
      } else {
        results.push(`‚ùå FirestoreË™≠„ÅøËæº„ÅøÂ§±Êïó: ${loadResult.error?.message || '„Éá„Éº„Çø„Å™„Åó'}`);
      }
      
      results.push('');
      results.push('üéâ Phase 1.1 ProfileService „ÉÜ„Çπ„ÉàÂÆå‰∫ÜÔºÅ');
      
    } catch (error) {
      results.push(`‚ùå „ÉÜ„Çπ„Éà„Ç®„É©„Éº: ${error.message}`);
      if (error.name === 'ZodError') {
        results.push(`üêõ Zod„Ç®„É©„ÉºË©≥Á¥∞: ${JSON.stringify(error.errors, null, 2)}`);
      }
    }
    
    setTestResults(results);
    setIsLoading(false);
  };

  const testProfileServiceUpdate = async () => {
    setIsLoading(true);
    const results: string[] = [];
    
    try {
      results.push('üîÑ Phase 1.2: ProfileServiceÊõ¥Êñ∞„ÉÜ„Çπ„ÉàÈñãÂßã');
      
      if (!userId) {
        results.push('‚ùå „É¶„Éº„Ç∂„ÉºID„Åå„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇÂÖà„Å´‰øùÂ≠ò„ÉÜ„Çπ„Éà„ÇíÂÆüË°å„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ');
        setTestResults(results);
        setIsLoading(false);
        return;
      }
      
      // Test partial update
      const updateResult = await profileService.updateUserProfile({
        userId,
        updates: {
          profileV1: {
            time_budget_min_per_day: 90,
            heat_level: 5,
          },
          goalText: 'Phase 1Êõ¥Êñ∞„ÉÜ„Çπ„Éà: Advanced React Native',
        },
      });
      
      if (updateResult.success) {
        results.push('‚úÖ ÈÉ®ÂàÜÊõ¥Êñ∞ÊàêÂäü');
      } else {
        results.push(`‚ùå ÈÉ®ÂàÜÊõ¥Êñ∞Â§±Êïó: ${updateResult.error.message}`);
        throw updateResult.error;
      }
      
      // Verify updated data
      const loadResult = await profileService.getUserProfile(userId);
      if (loadResult.success && loadResult.data) {
        results.push('‚úÖ Êõ¥Êñ∞Âæå„Éá„Éº„ÇøÁ¢∫Ë™ç');
        results.push(`üìä ÊôÇÈñì‰∫àÁÆóÊõ¥Êñ∞: ${loadResult.data.profile_v1.time_budget_min_per_day}ÂàÜ/Êó•`);
        results.push(`üî• „Éí„Éº„Éà„É¨„Éô„É´Êõ¥Êñ∞: ${loadResult.data.profile_v1.heat_level}`);
        results.push(`üéØ ÁõÆÊ®ôÊõ¥Êñ∞: ${loadResult.data.basic.goal_text}`);
        
        // Test onboarding status check
        const onboardingResult = await profileService.hasCompletedOnboarding(userId);
        if (onboardingResult.success) {
          results.push(`‚úÖ „Ç™„É≥„Éú„Éº„Éá„Ç£„É≥„Ç∞Áä∂Ê≥Å: ${onboardingResult.data ? 'ÂÆå‰∫Ü' : 'Êú™ÂÆå‰∫Ü'}`);
        }
      }
      
      results.push('');
      results.push('üéâ Phase 1.2 Êõ¥Êñ∞„ÉÜ„Çπ„ÉàÂÆå‰∫ÜÔºÅ');
      
    } catch (error) {
      results.push(`‚ùå Êõ¥Êñ∞„ÉÜ„Çπ„Éà„Ç®„É©„Éº: ${error.message}`);
    }
    
    setTestResults(results);
    setIsLoading(false);
  };

  // === Debug Authentication ===
  const debugAuthAndFirestore = async () => {
    setIsLoading(true);
    const results: string[] = [];
    
    try {
      results.push('üîç Ë™çË®º„ÉªFirestoreË®∫Êñ≠ÈñãÂßã');
      results.push('=============================');
      
      // Ensure authentication
      if (!userId) {
        results.push('üîê ÂåøÂêçË™çË®º„ÇíÂÆüË°å‰∏≠...');
        const user = await firebaseConfig.signInAnonymously();
        setUserId(user.uid);
        results.push(`‚úÖ ÂåøÂêçË™çË®ºÊàêÂäü: ${user.uid}`);
      }
      
      // Run comprehensive diagnosis
      const diagnosis = await profileService.diagnoseAuthAndFirestore();
      
      results.push('');
      results.push('üìä Ë®∫Êñ≠ÁµêÊûú:');
      results.push(`üîê Ë™çË®ºÁä∂ÊÖã: ${diagnosis.authStatus}`);
      results.push(`üë§ „É¶„Éº„Ç∂„ÉºID: ${diagnosis.userId || '„Å™„Åó'}`);
      results.push(`üóÑÔ∏è FirestoreÁä∂ÊÖã: ${diagnosis.firestoreStatus}`);
      
      if (diagnosis.userClaims) {
        results.push('');
        results.push('üé´ „É¶„Éº„Ç∂„Éº„ÇØ„É¨„Éº„É†:');
        results.push(`   ÂåøÂêç„É¶„Éº„Ç∂„Éº: ${diagnosis.userClaims.isAnonymous}`);
        results.push(`   „Éó„É≠„Éê„Ç§„ÉÄ„Éº: ${diagnosis.userClaims.providerData.length}ÂÄã`);
        results.push(`   Áô∫Ë°åËÄÖ: ${diagnosis.userClaims.tokenIssuer}`);
        results.push(`   ÂØæË±°ËÄÖ: ${diagnosis.userClaims.tokenAudience}`);
      }
      
      results.push('');
      results.push(`üß™ Êõ∏„ÅçËæº„Åø„ÉÜ„Çπ„Éà: ${diagnosis.testWriteResult}`);
      
      if (diagnosis.testWriteResult?.includes('successful')) {
        results.push('');
        results.push('üéâ Ë®∫Êñ≠ÊàêÂäü: Ë™çË®º„ÉªFirestoreÊ®©ÈôêOK!');
        results.push('Phase 1„ÉÜ„Çπ„Éà„ÅÆÊ∫ñÂÇôÂÆå‰∫Ü„Åß„Åô„ÄÇ');
      } else {
        results.push('');
        results.push('‚ùå Êõ∏„ÅçËæº„ÅøÊ®©Èôê„Ç®„É©„ÉºÊ§úÂá∫');
        results.push('Firestore Rules„Åæ„Åü„ÅØË™çË®ºË®≠ÂÆö„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ');
      }
      
    } catch (error) {
      results.push(`‚ùå Ë®∫Êñ≠„Ç®„É©„Éº: ${error.message}`);
    }
    
    setTestResults(results);
    setIsLoading(false);
  };

  const testDataFoundationFull = async () => {
    setIsLoading(true);
    const results: string[] = [];
    
    try {
      results.push('üèóÔ∏è Phase 1 „Éá„Éº„ÇøÂü∫Áõ§ Áµ±Âêà„ÉÜ„Çπ„ÉàÈñãÂßã');
      results.push('=======================================');
      
      // Test 0: Pre-flight authentication diagnosis
      results.push('');
      results.push('Test 0: Ë™çË®º„ÉªÊ®©ÈôêË®∫Êñ≠...');
      const diagnosis = await profileService.diagnoseAuthAndFirestore();
      results.push(`üîê Ë™çË®º: ${diagnosis.authStatus}`);
      results.push(`üß™ Êõ∏„ÅçËæº„Åø„ÉÜ„Çπ„Éà: ${diagnosis.testWriteResult}`);
      
      if (!diagnosis.testWriteResult?.includes('successful')) {
        results.push('‚ùå ‰∫ãÂâçË®∫Êñ≠Â§±Êïó - Êõ∏„ÅçËæº„ÅøÊ®©Èôê„Åå„ÅÇ„Çä„Åæ„Åõ„Çì');
        results.push('ÂÖà„Å´„Äåüîç Ë™çË®º„ÉªFirestoreË®∫Êñ≠„Äç„ÇíÂÆüË°å„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
        setTestResults(results);
        setIsLoading(false);
        return;
      }
      
      // Test 1: Basic Firestore connection
      results.push('');
      results.push('Test 1: FirebaseÊé•Á∂öÁ¢∫Ë™ç...');
      if (!userId) {
        const user = await firebaseConfig.signInAnonymously();
        setUserId(user.uid);
        results.push(`‚úÖ ÂåøÂêçË™çË®º: ${user.uid.substring(0, 8)}...`);
      } else {
        results.push(`‚úÖ Êó¢Â≠ò„É¶„Éº„Ç∂„Éº: ${userId.substring(0, 8)}...`);
      }
      
      // Test 2: Type validation 
      results.push('');
      results.push('Test 2: TypeScriptÂûã„ÉªZodÊ§úË®º...');
      const testProfile = profileService.createBasicTestProfile();
      const testDeepDive = profileService.createBasicTestGoalDeepDive();
      
      ProfileV1Schema.parse(testProfile);
      GoalDeepDiveAnswersSchema.parse(testDeepDive);
      results.push('‚úÖ ÂûãÊ§úË®ºÂÆå‰∫ÜÔºàProfileV1 + GoalDeepDiveÔºâ');
      
      // Test 3: Save operation
      results.push('');
      results.push('Test 3: „Éó„É≠„Éï„Ç°„Ç§„É´‰øùÂ≠ò...');
      const saveResult = await profileService.saveUserProfile({
        userId: userId!,
        goalText: 'Phase 1Áµ±Âêà„ÉÜ„Çπ„Éà: „Éï„É´„Çπ„Çø„ÉÉ„ÇØÈñãÁô∫ËÄÖ',
        profileV1: testProfile,
        goalDeepDive: testDeepDive,
      });
      
      if (!saveResult.success) throw saveResult.error;
      results.push('‚úÖ Firestore‰øùÂ≠òÂÆå‰∫Ü');
      
      // Test 4: Load operation
      results.push('');
      results.push('Test 4: „Éó„É≠„Éï„Ç°„Ç§„É´Ë™≠„ÅøËæº„Åø...');
      const loadResult = await profileService.getUserProfile(userId!);
      if (!loadResult.success || !loadResult.data) throw loadResult.error || new Error('No data');
      
      const profileData = loadResult.data;
      results.push('‚úÖ FirestoreË™≠„ÅøËæº„ÅøÂÆå‰∫Ü');
      results.push(`üìã „Éê„Éº„Ç∏„Éß„É≥: ${profileData.meta.version}`);
      results.push(`üéØ ÁõÆÊ®ô: ${profileData.basic.goal_text}`);
      results.push(`‚è∞ ÊôÇÈñì‰∫àÁÆó: ${profileData.profile_v1.time_budget_min_per_day}ÂàÜ/Êó•`);
      results.push(`üé™ „É¢„ÉÅ„Éô„Éº„Ç∑„Éß„É≥: ${profileData.profile_v1.goal_motivation}`);
      
      // Test 5: Update operation
      results.push('');
      results.push('Test 5: ÈÉ®ÂàÜÊõ¥Êñ∞„ÉÜ„Çπ„Éà...');
      const updateResult = await profileService.updateUserProfile({
        userId: userId!,
        updates: {
          profileV1: { heat_level: 4, difficulty_tolerance: 0.8 },
        },
      });
      
      if (!updateResult.success) throw updateResult.error;
      results.push('‚úÖ ÈÉ®ÂàÜÊõ¥Êñ∞ÂÆå‰∫Ü');
      
      // Test 6: Onboarding status management
      results.push('');
      results.push('Test 6: „Ç™„É≥„Éú„Éº„Éá„Ç£„É≥„Ç∞Áä∂ÊÖãÁÆ°ÁêÜ...');
      const resetResult = await profileService.resetOnboarding(userId!);
      if (!resetResult.success) throw resetResult.error;
      
      const statusResult = await profileService.hasCompletedOnboarding(userId!);
      if (!statusResult.success) throw statusResult.error;
      
      results.push(`‚úÖ „Ç™„É≥„Éú„Éº„Éá„Ç£„É≥„Ç∞Áä∂ÊÖã: ${statusResult.data ? 'ÂÆå‰∫Ü' : 'Êú™ÂÆå‰∫Ü'}`);
      
      const markResult = await profileService.markOnboardingCompleted(userId!);
      if (!markResult.success) throw markResult.error;
      results.push('‚úÖ „Ç™„É≥„Éú„Éº„Éá„Ç£„É≥„Ç∞ÂÆå‰∫Ü„Éû„Éº„ÇØ');
      
      // Final verification
      results.push('');
      results.push('Final: ÊúÄÁµÇÊ§úË®º...');
      const finalLoadResult = await profileService.getUserProfile(userId!);
      if (!finalLoadResult.success || !finalLoadResult.data) throw new Error('Final load failed');
      
      const finalData = finalLoadResult.data;
      results.push(`‚úÖ ÊúÄÁµÇ„Éá„Éº„ÇøÊï¥ÂêàÊÄßÁ¢∫Ë™ç`);
      results.push(`üìä Êõ¥Êñ∞Âæå„Éí„Éº„Éà„É¨„Éô„É´: ${finalData.profile_v1.heat_level}`);
      results.push(`üéØ „Ç™„É≥„Éú„Éº„Éá„Ç£„É≥„Ç∞: ${finalData.meta.completed_onboarding ? 'ÂÆå‰∫Ü' : 'Êú™ÂÆå‰∫Ü'}`);
      
      results.push('');
      results.push('üéâüéâüéâ Phase 1 „Éá„Éº„ÇøÂü∫Áõ§ Áµ±Âêà„ÉÜ„Çπ„ÉàÊàêÂäüÔºÅüéâüéâüéâ');
      results.push('=======================================');
      results.push('‚úÖ FirebaseÊé•Á∂ö„ÉªË™çË®º');
      results.push('‚úÖ TypeScriptÂûãÂÆöÁæ©„ÉªZodÊ§úË®º');
      results.push('‚úÖ Firestore CRUDÊìç‰Ωú');
      results.push('‚úÖ „Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞');
      results.push('‚úÖ „Ç™„É≥„Éú„Éº„Éá„Ç£„É≥„Ç∞Áä∂ÊÖãÁÆ°ÁêÜ');
      results.push('');
      results.push('üìã Phase 2Ê∫ñÂÇôÂÆå‰∫Ü: „Éó„É≠„Éï„Ç°„Ç§„É™„É≥„Ç∞Ê©üËÉΩÂÆüË£Ö„ÅåÂèØËÉΩ„Åß„ÅôÔºÅ');
      
    } catch (error) {
      results.push(`‚ùå Áµ±Âêà„ÉÜ„Çπ„ÉàÂ§±Êïó: ${error.message}`);
      console.error('Data foundation test error:', error);
    }
    
    setTestResults(results);
    setIsLoading(false);
  };

  // === Phase 2: Profiling Tests ===

  const testGoalDeepDiveUI = () => {
    setCurrentGoalDeepDive(null);
    setCurrentProfile(null);
    setShowGoalDeepDive(true);
  };

  const handleGoalDeepDiveComplete = (answers: GoalDeepDiveAnswers) => {
    setCurrentGoalDeepDive(answers);
    setShowGoalDeepDive(false);
    
    const results: string[] = [];
    results.push('üéØ Goal Deep DiveÂÆå‰∫ÜÔºÅ');
    results.push(`‚úÖ ÁõÆÊ®ôËª∏: ${answers.goal_focus.choice} - ${answers.goal_focus.note || 'Ë©≥Á¥∞„Å™„Åó'}`);
    results.push(`‚úÖ ÊúüÈñì: ${answers.goal_horizon.choice} - ${answers.goal_horizon.note || 'Ë©≥Á¥∞„Å™„Åó'}`);
    results.push(`‚úÖ ÈáçË¶ñÁÇπ: ${answers.goal_tradeoff.choice} - ${answers.goal_tradeoff.note || 'Ë©≥Á¥∞„Å™„Åó'}`);
    results.push(`‚úÖ ÊàêÊûúË®ºÊòé: ${answers.goal_evidence.choice} - ${answers.goal_evidence.note || 'Ë©≥Á¥∞„Å™„Åó'}`);
    results.push('');
    results.push('üìù Ê¨°„ÅØProfileForm„Çí„ÉÜ„Çπ„Éà„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
    
    setTestResults(results);
  };

  const testProfileFormUI = () => {
    setCurrentProfile(null);
    setShowProfileForm(true);
  };

  const handleProfileFormComplete = (profile: ProfileV1) => {
    setCurrentProfile(profile);
    setShowProfileForm(false);
    
    const results: string[] = [];
    results.push('üë§ ProfileFormÂÆå‰∫ÜÔºÅ');
    results.push(`‚úÖ ÊôÇÈñì‰∫àÁÆó: ${profile.time_budget_min_per_day}ÂàÜ/Êó•`);
    results.push(`‚úÖ „Éî„Éº„ÇØÊôÇÈñì: ${profile.peak_hours.length}ÂÄã„ÅÆÊôÇÈñìÂ∏Ø`);
    results.push(`‚úÖ „É¢„ÉÅ„Éô„Éº„Ç∑„Éß„É≥: ${profile.motivation_style}`);
    results.push(`‚úÖ Èõ£ÊòìÂ∫¶Ë®±ÂÆπ: ${profile.difficulty_tolerance}`);
    results.push(`‚úÖ Â≠¶ÁøíÊñπÊ≥ï: ${profile.modality_preference.join(', ')}`);
    results.push(`‚úÖ ÊàêÊûúÁâ©: ${profile.deliverable_preferences.join(', ')}`);
    results.push(`‚úÖ ÁõÆÊ®ô„É¢„ÉÅ„Éô„Éº„Ç∑„Éß„É≥: ${profile.goal_motivation}`);
    results.push('');
    results.push('üíæ Áµ±Âêà„ÉÜ„Çπ„Éà„ÅßFirestore„Å´‰øùÂ≠òÂèØËÉΩ„Åß„Åô');
    
    setTestResults(results);
  };

  const testProfilingIntegration = async () => {
    if (!currentGoalDeepDive || !currentProfile) {
      Alert.alert(
        'ÂøÖË¶Å„Éá„Éº„Çø‰∏çË∂≥', 
        'Goal Deep Dive„Å®Profile Form„ÇíÂÖà„Å´ÂÆå‰∫Ü„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ',
        [{ text: 'OK' }]
      );
      return;
    }

    setIsLoading(true);
    const results: string[] = [];
    
    try {
      results.push('üîÑ Phase 2 „Éó„É≠„Éï„Ç°„Ç§„É™„É≥„Ç∞Áµ±Âêà„ÉÜ„Çπ„ÉàÈñãÂßã');
      results.push('=====================================');
      
      // Ensure authentication
      if (!userId) {
        const user = await firebaseConfig.signInAnonymously();
        setUserId(user.uid);
        results.push(`üîê ÂåøÂêçË™çË®º: ${user.uid.substring(0, 8)}...`);
      }

      // Test complete profile save
      const saveResult = await profileService.saveUserProfile({
        userId: userId!,
        goalText: 'Phase 2Áµ±Âêà„ÉÜ„Çπ„Éà: „Éó„É≠„Éï„Ç°„Ç§„É™„É≥„Ç∞Ê©üËÉΩÊ§úË®º',
        profileV1: currentProfile,
        goalDeepDive: currentGoalDeepDive,
      });

      if (saveResult.success) {
        results.push('‚úÖ Áµ±Âêà„Éá„Éº„Çø‰øùÂ≠òÊàêÂäü');
      } else {
        throw saveResult.error;
      }

      // Verify saved data
      const loadResult = await profileService.getUserProfile(userId!);
      if (loadResult.success && loadResult.data) {
        results.push('‚úÖ Áµ±Âêà„Éá„Éº„ÇøË™≠„ÅøËæº„ÅøÊàêÂäü');
        results.push(`üìä Goal Focus: ${loadResult.data.goal_deep_dive.goal_focus.choice}`);
        results.push(`üìä Goal Horizon: ${loadResult.data.goal_deep_dive.goal_horizon.choice}`);
        results.push(`üìä ÊôÇÈñì‰∫àÁÆó: ${loadResult.data.profile_v1.time_budget_min_per_day}ÂàÜ/Êó•`);
        results.push(`üìä „É¢„ÉÅ„Éô„Éº„Ç∑„Éß„É≥: ${loadResult.data.profile_v1.goal_motivation}`);
      }

      results.push('');
      results.push('üéâüéâüéâ Phase 2 „Éó„É≠„Éï„Ç°„Ç§„É™„É≥„Ç∞Áµ±Âêà„ÉÜ„Çπ„ÉàÊàêÂäüÔºÅüéâüéâüéâ');
      results.push('=====================================');
      results.push('‚úÖ Goal Deep Dive UI');
      results.push('‚úÖ Profile Form UI');
      results.push('‚úÖ „Éá„Éº„ÇøÁµ±Âêà„Éª‰øùÂ≠ò');
      results.push('‚úÖ ÂûãÂÆâÂÖ®ÊÄßÊ§úË®º');
      results.push('');
      results.push('üìã Phase 3Ê∫ñÂÇôÂÆå‰∫Ü: AI Quest GenerationÂÆüË£Ö„ÅåÂèØËÉΩ„Åß„ÅôÔºÅ');
      
    } catch (error) {
      results.push(`‚ùå Áµ±Âêà„ÉÜ„Çπ„ÉàÂ§±Êïó: ${error.message}`);
    }
    
    setTestResults(results);
    setIsLoading(false);
  };

  const resetProfilingTest = () => {
    setCurrentGoalDeepDive(null);
    setCurrentProfile(null);
    setShowGoalDeepDive(false);
    setShowProfileForm(false);
    setTestResults([]);
  };

  // Show profiling components
  if (showGoalDeepDive) {
    return (
      <GoalDeepDive
        onComplete={handleGoalDeepDiveComplete}
        onBack={() => setShowGoalDeepDive(false)}
      />
    );
  }

  if (showProfileForm) {
    return (
      <ProfileForm
        onComplete={handleProfileFormComplete}
        onBack={() => setShowProfileForm(false)}
      />
    );
  }

  return (
    <SafeAreaView style={styles.container}>
      <ScrollView>
        <Text style={styles.title}>üß™ FirebaseÊ©üËÉΩ„ÉÜ„Çπ„Éà</Text>
        
        {/* „Çπ„ÉÜ„Éº„Çø„ÇπË°®Á§∫ */}
        <View style={styles.statusContainer}>
          <Text style={styles.statusTitle}>ÁèæÂú®„ÅÆ„Çπ„ÉÜ„Éº„Çø„Çπ</Text>
          <Text style={styles.statusText}>üîê Ë™çË®º: {connectionStatus}</Text>
          <Text style={styles.statusText}>üîÑ ÂêåÊúü: {syncStatus}</Text>
          <Text style={styles.statusText}>ü§ñ AI: {aiStatus}</Text>
          {userId && (
            <Text style={styles.statusText}>üë§ „É¶„Éº„Ç∂„ÉºID: {userId.substring(0, 8)}...</Text>
          )}
        </View>

        {/* Phase 1: Data Foundation Tests */}
        <View style={styles.sectionContainer}>
          <Text style={styles.sectionTitle}>üèóÔ∏è Phase 1: „Éá„Éº„ÇøÂü∫Áõ§„ÉÜ„Çπ„Éà</Text>
          
          <TouchableOpacity 
            style={[styles.button, styles.infoButton]}
            onPress={debugAuthAndFirestore}
          >
            <Text style={[styles.buttonText, styles.infoButtonText]}>
              üîç Ë™çË®º„ÉªFirestoreË®∫Êñ≠
            </Text>
          </TouchableOpacity>
          
          <TouchableOpacity 
            style={[styles.button, styles.primaryButton, isLoading && styles.buttonDisabled]}
            onPress={testDataFoundationFull}
            disabled={isLoading}
          >
            <Text style={[styles.buttonText, styles.primaryButtonText]}>
              {isLoading ? '„ÉÜ„Çπ„ÉàÂÆüË°å‰∏≠...' : 'üéØ Phase 1 Áµ±Âêà„ÉÜ„Çπ„Éà'}
            </Text>
          </TouchableOpacity>

          <TouchableOpacity 
            style={[styles.button, styles.secondaryButton]}
            onPress={testProfileServiceSave}
          >
            <Text style={[styles.buttonText, styles.secondaryButtonText]}>
              üèóÔ∏è ProfileService‰øùÂ≠ò„ÉÜ„Çπ„Éà
            </Text>
          </TouchableOpacity>

          <TouchableOpacity 
            style={[styles.button, styles.secondaryButton]}
            onPress={testProfileServiceUpdate}
          >
            <Text style={[styles.buttonText, styles.secondaryButtonText]}>
              üîÑ ProfileServiceÊõ¥Êñ∞„ÉÜ„Çπ„Éà
            </Text>
          </TouchableOpacity>
        </View>

        {/* Phase 2: Profiling Features Tests */}
        <View style={styles.sectionContainer}>
          <Text style={styles.sectionTitle}>üë§ Phase 2: „Éó„É≠„Éï„Ç°„Ç§„É™„É≥„Ç∞Ê©üËÉΩ„ÉÜ„Çπ„Éà</Text>
          
          <TouchableOpacity 
            style={[styles.button, styles.primaryButton]}
            onPress={testGoalDeepDiveUI}
          >
            <Text style={[styles.buttonText, styles.primaryButtonText]}>
              üéØ Goal Deep Dive UI„ÉÜ„Çπ„Éà
            </Text>
          </TouchableOpacity>

          <TouchableOpacity 
            style={[styles.button, styles.primaryButton]}
            onPress={testProfileFormUI}
          >
            <Text style={[styles.buttonText, styles.primaryButtonText]}>
              üìù Profile Form UI„ÉÜ„Çπ„Éà
            </Text>
          </TouchableOpacity>

          <TouchableOpacity 
            style={[
              styles.button, 
              (currentGoalDeepDive && currentProfile) ? styles.successButton : styles.secondaryButton,
              isLoading && styles.buttonDisabled
            ]}
            onPress={testProfilingIntegration}
            disabled={isLoading}
          >
            <Text style={[
              styles.buttonText, 
              (currentGoalDeepDive && currentProfile) ? styles.successButtonText : styles.secondaryButtonText
            ]}>
              {isLoading ? '„ÉÜ„Çπ„ÉàÂÆüË°å‰∏≠...' : 'üîÑ „Éó„É≠„Éï„Ç°„Ç§„É™„É≥„Ç∞Áµ±Âêà„ÉÜ„Çπ„Éà'}
            </Text>
          </TouchableOpacity>

          <TouchableOpacity 
            style={[styles.button, styles.infoButton]}
            onPress={resetProfilingTest}
          >
            <Text style={[styles.buttonText, styles.infoButtonText]}>
              üîÑ „Éó„É≠„Éï„Ç°„Ç§„É™„É≥„Ç∞„Éá„Éº„Çø„É™„Çª„ÉÉ„Éà
            </Text>
          </TouchableOpacity>

          {/* Progress indicators */}
          <View style={styles.progressIndicators}>
            <View style={[styles.indicator, currentGoalDeepDive && styles.indicatorComplete]}>
              <Text style={[styles.indicatorText, currentGoalDeepDive && styles.indicatorTextComplete]}>
                Goal Deep Dive {currentGoalDeepDive ? '‚úÖ' : '‚è≥'}
              </Text>
            </View>
            <View style={[styles.indicator, currentProfile && styles.indicatorComplete]}>
              <Text style={[styles.indicatorText, currentProfile && styles.indicatorTextComplete]}>
                Profile Form {currentProfile ? '‚úÖ' : '‚è≥'}
              </Text>
            </View>
          </View>
        </View>

        {/* Legacy Tests */}
        <View style={styles.sectionContainer}>
          <Text style={styles.sectionTitle}>üß™ „É¨„Ç¨„Ç∑„Éº„ÉÜ„Çπ„Éà</Text>
          
          <TouchableOpacity 
            style={[styles.button, styles.secondaryButton, isLoading && styles.buttonDisabled]}
            onPress={runFullFirebaseTest}
            disabled={isLoading}
          >
            <Text style={[styles.buttonText, styles.secondaryButtonText]}>
              {isLoading ? '„ÉÜ„Çπ„ÉàÂÆüË°å‰∏≠...' : 'üî• FirebaseÂÖ®Ê©üËÉΩ„ÉÜ„Çπ„Éà'}
            </Text>
          </TouchableOpacity>

          <TouchableOpacity 
            style={[styles.button, styles.secondaryButton]}
            onPress={testAIInitialization}
          >
            <Text style={[styles.buttonText, styles.secondaryButtonText]}>
              üöÄ AIÂàùÊúüÂåñ„Çµ„Éº„Éì„Çπ„ÉÜ„Çπ„Éà
            </Text>
          </TouchableOpacity>

          <TouchableOpacity 
            style={[styles.button, styles.secondaryButton]}
            onPress={testMockSkillMap}
          >
            <Text style={[styles.buttonText, styles.secondaryButtonText]}>
              üß™ „É¢„ÉÉ„ÇØ„Çπ„Ç≠„É´„Éû„ÉÉ„Éó„ÉÜ„Çπ„Éà
            </Text>
          </TouchableOpacity>

          <TouchableOpacity 
            style={[styles.button, styles.secondaryButton]}
            onPress={testMockQuests}
          >
            <Text style={[styles.buttonText, styles.secondaryButtonText]}>
              üé≤ „É¢„ÉÉ„ÇØ„ÇØ„Ç®„Çπ„Éà„ÉÜ„Çπ„Éà
            </Text>
          </TouchableOpacity>

          <TouchableOpacity 
            style={[styles.button, styles.secondaryButton]}
            onPress={testAdvancedQuests}
          >
            <Text style={[styles.buttonText, styles.secondaryButtonText]}>
              üéØ „Éï„É´Áµ±Âêà„ÉÜ„Çπ„Éà
            </Text>
          </TouchableOpacity>

          <TouchableOpacity 
            style={[styles.button, styles.infoButton]}
            onPress={restartOnboarding}
          >
            <Text style={[styles.buttonText, styles.infoButtonText]}>
              üéØ „Ç™„É≥„Éú„Éº„Éá„Ç£„É≥„Ç∞ÂÜçËµ∑Âãï
            </Text>
          </TouchableOpacity>

          <TouchableOpacity 
            style={[styles.button, styles.warningButton]}
            onPress={clearTestData}
          >
            <Text style={[styles.buttonText, styles.warningButtonText]}>
              üóëÔ∏è „ÉÜ„Çπ„Éà„Éá„Éº„ÇøÂâäÈô§
            </Text>
          </TouchableOpacity>
        </View>

        {/* „ÉÜ„Çπ„ÉàÁµêÊûú */}
        {testResults.length > 0 && (
          <View style={styles.resultsContainer}>
            <Text style={styles.resultsTitle}>„ÉÜ„Çπ„ÉàÁµêÊûú</Text>
            {testResults.map((result, index) => (
              <Text key={index} style={styles.resultText}>{result}</Text>
            ))}
          </View>
        )}
        
        {/* ‰ΩøÁî®ÊñπÊ≥ï */}
        <View style={styles.infoContainer}>
          <Text style={styles.infoTitle}>üìñ ‰ΩøÁî®ÊñπÊ≥ï</Text>
          <Text style={styles.infoText}>1. „ÄåFirebaseÂÖ®Ê©üËÉΩ„ÉÜ„Çπ„Éà„Äç„ÅßÂü∫Êú¨Ê©üËÉΩ„ÇíÁ¢∫Ë™ç</Text>
          <Text style={styles.infoText}>2. „ÄåAdvanced Quest Generation„Äç„ÅßË®≠Ë®àÊõ∏Ê©üËÉΩ„Çí„ÉÜ„Çπ„Éà</Text>
          <Text style={styles.infoText}>3. „Äå„Çª„Ç≠„É•„Ç¢API„Ç≠„ÉºÁÆ°ÁêÜ„ÉÜ„Çπ„Éà„Äç„ÅßÊöóÂè∑ÂåñÊ©üËÉΩ„Çí„ÉÜ„Çπ„Éà</Text>
          <Text style={styles.infoText}>4. „Äå„Ç™„É≥„Éú„Éº„Éá„Ç£„É≥„Ç∞ÂÜçËµ∑Âãï„Äç„ÅßÁõÆÊ®ôË®≠ÂÆöÁîªÈù¢„Å´Êàª„Çã</Text>
          <Text style={styles.infoText}>5. „ÄåOpenAI API„ÉÜ„Çπ„Éà„Äç„ÅßAIÊ©üËÉΩ„ÇíÁ¢∫Ë™ç</Text>
          <Text style={styles.infoText}>6. ÂïèÈ°å„Åå„ÅÇ„Çå„Å∞ÈñãÁô∫ËÄÖ„Å´Â†±Âëä</Text>
        </View>
      </ScrollView>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#0F2A44',
  },
  title: {
    fontSize: 28,
    fontWeight: 'bold',
    color: '#F3E7C9',
    textAlign: 'center',
    marginVertical: 20,
  },
  statusContainer: {
    backgroundColor: 'rgba(243, 231, 201, 0.1)',
    marginHorizontal: 20,
    borderRadius: 12,
    padding: 16,
    marginBottom: 20,
  },
  statusTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#F3E7C9',
    marginBottom: 12,
  },
  statusText: {
    fontSize: 16,
    color: '#B9C3CF',
    marginBottom: 4,
  },
  buttonContainer: {
    paddingHorizontal: 20,
    gap: 12,
  },
  sectionContainer: {
    marginHorizontal: 20,
    marginBottom: 24,
    backgroundColor: 'rgba(243, 231, 201, 0.05)',
    borderRadius: 12,
    padding: 16,
    borderWidth: 1,
    borderColor: 'rgba(243, 231, 201, 0.2)',
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: '700',
    color: '#F3E7C9',
    marginBottom: 12,
    textAlign: 'center',
  },
  button: {
    paddingVertical: 16,
    borderRadius: 12,
    marginBottom: 4,
  },
  primaryButton: {
    backgroundColor: '#F3E7C9',
  },
  secondaryButton: {
    backgroundColor: 'rgba(243, 231, 201, 0.2)',
    borderWidth: 1,
    borderColor: '#F3E7C9',
  },
  warningButton: {
    backgroundColor: 'rgba(255, 107, 107, 0.2)',
    borderWidth: 1,
    borderColor: '#FF6B6B',
  },
  buttonDisabled: {
    opacity: 0.5,
  },
  buttonText: {
    fontSize: 16,
    textAlign: 'center',
    fontWeight: '600',
  },
  primaryButtonText: {
    color: '#0F2A44',
  },
  secondaryButtonText: {
    color: '#F3E7C9',
  },
  warningButtonText: {
    color: '#FF6B6B',
  },
  infoButton: {
    backgroundColor: 'rgba(0, 122, 255, 0.2)',
    borderWidth: 1,
    borderColor: '#007AFF',
  },
  infoButtonText: {
    color: '#007AFF',
  },
  resultsContainer: {
    backgroundColor: 'rgba(255, 255, 255, 0.05)',
    marginHorizontal: 20,
    borderRadius: 12,
    padding: 16,
    marginTop: 20,
  },
  resultsTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#F3E7C9',
    marginBottom: 12,
  },
  resultText: {
    fontSize: 14,
    color: '#B9C3CF',
    marginBottom: 6,
    lineHeight: 20,
  },
  infoContainer: {
    backgroundColor: 'rgba(185, 195, 207, 0.1)',
    marginHorizontal: 20,
    borderRadius: 12,
    padding: 16,
    marginTop: 20,
    marginBottom: 40,
  },
  infoTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#F3E7C9',
    marginBottom: 8,
  },
  infoText: {
    fontSize: 14,
    color: '#B9C3CF',
    marginBottom: 4,
  },
  successButton: {
    backgroundColor: '#4CAF50',
  },
  successButtonText: {
    color: '#FFFFFF',
  },
  progressIndicators: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginTop: 12,
    gap: 8,
  },
  indicator: {
    flex: 1,
    backgroundColor: 'rgba(185, 195, 207, 0.1)',
    borderRadius: 8,
    padding: 12,
    borderWidth: 1,
    borderColor: 'rgba(185, 195, 207, 0.3)',
  },
  indicatorComplete: {
    backgroundColor: 'rgba(76, 175, 80, 0.2)',
    borderColor: '#4CAF50',
  },
  indicatorText: {
    fontSize: 12,
    color: '#B9C3CF',
    textAlign: 'center',
  },
  indicatorTextComplete: {
    color: '#4CAF50',
    fontWeight: '600',
  },
});